// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace protabula.Migrations
{
    [DbContext(typeof(ScrapperDbContext))]
    partial class ScrapperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("PrimaryRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingRange")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatingValue")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ReviewStatisticsId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReviewStatisticsId")
                        .IsUnique();

                    b.ToTable("PrimaryRatings");
                });

            modelBuilder.Entity("RatingDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ReviewStatisticsId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReviewStatisticsId");

                    b.ToTable("RatingDistributions");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentLocale")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerifiedBuyer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LatestModificationOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("NegativeFeedbacksCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositiveFeedbacksCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PrimaryRatingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReviewStatisticsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceCountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmissionOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryRatingId");

                    b.HasIndex("ReviewStatisticsId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ReviewStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstReviewedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastReviewedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalNegativeFeedbackCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalNotRecommendedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPositiveFeedbackCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRecommendedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalReviewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ReviewStatistics");
                });

            modelBuilder.Entity("Reviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("SecondaryRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RatingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RatingPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingRange")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatingValue")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReviewStatisticsId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ReviewStatisticsId");

                    b.ToTable("SecondaryRatings");
                });

            modelBuilder.Entity("PrimaryRating", b =>
                {
                    b.HasOne("ReviewStatistics", "ReviewStatistics")
                        .WithOne("PrimaryRating")
                        .HasForeignKey("PrimaryRating", "ReviewStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewStatistics");
                });

            modelBuilder.Entity("RatingDistribution", b =>
                {
                    b.HasOne("ReviewStatistics", "ReviewStatistics")
                        .WithMany("RatingDistributions")
                        .HasForeignKey("ReviewStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewStatistics");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.HasOne("PrimaryRating", "PrimaryRating")
                        .WithMany()
                        .HasForeignKey("PrimaryRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewStatistics", "ReviewStatistics")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryRating");

                    b.Navigation("ReviewStatistics");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("SecondaryRating", b =>
                {
                    b.HasOne("Review", null)
                        .WithMany("SecondaryRatings")
                        .HasForeignKey("ReviewId");

                    b.HasOne("ReviewStatistics", "ReviewStatistics")
                        .WithMany("SecondaryRatings")
                        .HasForeignKey("ReviewStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewStatistics");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Navigation("SecondaryRatings");
                });

            modelBuilder.Entity("ReviewStatistics", b =>
                {
                    b.Navigation("PrimaryRating")
                        .IsRequired();

                    b.Navigation("RatingDistributions");

                    b.Navigation("Reviews");

                    b.Navigation("SecondaryRatings");
                });

            modelBuilder.Entity("Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
